import { NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

export async function GET() {
  try {
    console.log("üîç API Admin Stagiaires - D√©but de la requ√™te")

    const supabase = await createClient()

    // V√©rifier l'authentification
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession()

    if (sessionError || !session?.user) {
      console.log("‚ùå Pas de session utilisateur:", sessionError?.message)
      return NextResponse.json({ success: false, error: "Non authentifi√©" }, { status: 401 })
    }

    console.log("‚úÖ Session trouv√©e pour:", session.user.email)

    // V√©rifier les permissions admin
    const { data: profile, error: profileError } = await supabase
      .from("users")
      .select("role")
      .eq("id", session.user.id)
      .single()

    if (profileError) {
      console.error("‚ùå Erreur r√©cup√©ration profil:", profileError)
      return NextResponse.json({ success: false, error: "Erreur de v√©rification des permissions" }, { status: 500 })
    }

    if (!profile || profile.role !== "admin") {
      console.log("‚ùå Utilisateur non autoris√©:", profile?.role)
      return NextResponse.json({ success: false, error: "Acc√®s non autoris√©" }, { status: 403 })
    }

    console.log("‚úÖ Utilisateur admin confirm√©")

    // R√©cup√©rer tous les stagiaires avec relations
    const { data: stagiaires, error } = await supabase
      .from("stagiaires")
      .select(`
        *,
        user:users!user_id(id, name, email, phone, is_active),
        tuteur:users!tuteur_id(id, name, email)
      `)
      .order("created_at", { ascending: false })

    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration stagiaires:", error)
      return NextResponse.json(
        { success: false, error: `Erreur lors de la r√©cup√©ration des stagiaires: ${error.message}` },
        { status: 500 },
      )
    }

    console.log("‚úÖ Stagiaires r√©cup√©r√©s:", stagiaires?.length || 0)

    return NextResponse.json({ success: true, data: stagiaires || [] })
  } catch (error: any) {
    console.error("üí• Erreur API stagiaires:", error)
    return NextResponse.json({ success: false, error: `Erreur interne du serveur: ${error.message}` }, { status: 500 })
  }
}